@using cashmanager.web.spa.Models;
@inject cashmanager.web.spa.Services.ITransactionService _transactionService;
@if (Loading)
{
    <Loading />
}
else
{
    <EditForm Model=@model OnValidSubmit=@FormSubmitted>
        <DataAnnotationsValidator />
        <ValidationMessage For=@(() => model) />
        <div class="row">
            <div class="col">
                <label>
                    Friendly Name:
                </label>
                <InputText @bind-Value=model.TransactionFriendlyName class="form-control" />
            </div>
            <div class="col">
                <label>
                    Amount:
                </label>
                <InputNumber @bind-Value=model.Amount class="form-control" />
            </div>
        </div>
        <div class="row">
            <div class="col">
                <label>
                    Type:
                </label>
                <InputSelect @bind-Value=model.TransactionType class="form-control">
                    @foreach (var a in Enum.GetValues(typeof(TransactionType)))
                    {
                    <option value="@a">@a</option>
                    }
            </InputSelect>
        </div>
        <div class="col">
            <label>
                Date:
            </label>
            <InputDate @bind-Value=model.TransactionDateTime class="form-control" />
        </div>
    </div>
    <div class="row">
        <div class="col">
            <button type="submit" class="btn btn-success" value="Save">Save</button>
            <button type="button" class="btn btn-outline-warning" @onclick="() => BtnClose()">Close</button>
        </div>
    </div>
</EditForm>
}


@code {

    [Parameter]
    public Guid AccountId { get; set; }

    [Parameter]
    public EventCallback CallbackCollapse { get; set; }

    private AddTransactionModel model = new();

    private bool Loading;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            this.model.AccountId = AccountId;
            this.model.TransactionDateTime = DateTime.Now;
        }
        catch (Exception ex)
        {

        }
        finally
        {
            Loading = false;
        }
    }
    async Task FormSubmitted(EditContext editContext)
    {
        try
        {
            bool formIsValid = editContext.Validate();
            if (formIsValid && editContext.IsModified())
            {
                Loading = true;
                await _transactionService.AddTransaction(model);
                await CallbackCollapse.InvokeAsync();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Failed to submit new transaction");
        }
        finally
        {
            Loading = false;
        }
    }

    protected async Task BtnClose()
    {
        try
        {
            await CallbackCollapse.InvokeAsync();
        }
        catch (Exception ex)
        {
        }
        finally
        {
        }
    }
}